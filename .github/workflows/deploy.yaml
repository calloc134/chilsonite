# .github/workflows/release.yml
# https://github.com/rust-build/rust-build.action#build-windows-and-linux-and-upload-as-zip

on:
  release:
    types: [created]
jobs:
  release:
    name: Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: windows
          - target: x86_64-unknown-linux-musl
            os: linux
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - name: Install Windows toolchain
        if: matrix.os == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-mingw-w64-x86-64-win32
          rustup target add x86_64-pc-windows-gnu
      - name: Install Linux musl toolchain
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          rustup target add x86_64-unknown-linux-musl
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/garadama-client${{ matrix.os == 'windows' && '.exe' || '' }}
            target/${{ matrix.target }}/release/cicada-server${{ matrix.os == 'windows' && '.exe' || '' }}
          if-no-files-found: error
          overwrite: true

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Rename artifacts
        run: |
          cd artifacts
          for target_dir in *; do
            if [ -d "$target_dir" ]; then
              cd "$target_dir"
              for file in *; do
                project=$(echo "$file" | cut -d'-' -f1)
                component=$(echo "$file" | cut -d'-' -f2 | cut -d'.' -f1)
                extension=$([[ "$file" == *.exe ]] && echo ".exe" || echo "")
                new_name="../${project}-${{ steps.release_name.outputs.RELEASE_NAME }}-${target_dir}-${component}${extension}"
                mv "$file" "$new_name"
              done
              cd ..
              rmdir "$target_dir"
            fi
          done
      - name: Generate release name
        id: release_name
        run: echo "RELEASE_NAME=chilsonite-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release_name.outputs.RELEASE_NAME }}
          files: |
            artifacts/**/*
          generate_release_notes: true
